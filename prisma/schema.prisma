// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  username  String
  avatar    String @default("https://ethereal-menu.s3.us-east-2.amazonaws.com/default/user/0d9cf5a5-5288-4f12-9c46-11795dc9d09c.jpeg")
  email     String
  password  String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  userCompanies UserCompany[]
  Cart          Cart[]        @ignore

  @@map("user")
}

model UserCompany {
  id        String @id @default(uuid())
  userId    String @map("user_id")
  companyId String @map("company_id")

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@map("user_company")
}

model Company {
  id          String  @id @default(uuid())
  name        String
  fantasyName String? @map("fantasy_name")
  cnpj        String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  userCompanies UserCompany[]
  stores        Store[]

  @@map("company")
}

model Store {
  id        String @id @default(uuid())
  name      String
  logo      String @default("https://ethereal-menu.s3.us-east-2.amazonaws.com/default/user/0d9cf5a5-5288-4f12-9c46-11795dc9d09c.jpeg")
  companyId String @map("company_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  commpany          Company            @relation(fields: [companyId], references: [id])
  products          Product[]
  page              Page?
  categories        Category[]
  coupons           Coupon[]
  colors            Color[]
  storeSocialMedias StoreSocialMedia[]

  @@map("store")
}

model StoreSocialMedia {
  id            String @id @default(uuid())
  href          String
  storeId       String @map("store_id")
  socialMediaId String @map("social_media_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  store       Store       @relation(fields: [storeId], references: [id])
  socialMedia SocialMedia @relation(fields: [socialMediaId], references: [id])

  @@map("store_social_media")
}

// TODO: ONLY ADM CREATE
model SocialMedia {
  // TODO: Nﾃグ FEITO
  id   String @id @default(uuid())
  name String
  icon String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  storeSocialMedias StoreSocialMedia[]

  @@map("social_midia")
}

model Page {
  id          String   @id @default(uuid())
  title       String
  description String
  images      String[] @default(["https://ethereal-menu.s3.us-east-2.amazonaws.com/page/60e939e4-530e-4c7a-9226-c874aadac0a7.avif", "https://ethereal-menu.s3.us-east-2.amazonaws.com/page/f84d78fc-21b8-44e0-8081-ac1785c77a69.jpeg"])
  storeId     String   @unique @map("store_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  store   Store    @relation(fields: [storeId], references: [id])
  footers Footer[]

  @@map("page")
}

model Brand {
  id   String @id @default(uuid())
  name String

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp
  products  Product[]

  @@map("brand")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  images      String[]  @default(["https://ethereal-menu.s3.us-east-2.amazonaws.com/product/images/77d06451-1f8e-4a2b-bbfe-7ff52f217873.jpeg"])
  price       Float
  brandId     String?   @map("brand_id")
  storeId     String    @map("store_id")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp

  store             Store             @relation(fields: [storeId], references: [id])
  productCategories ProductCategory[]
  skus              Sku[]
  ratings           Rating[]
  productSupplies   ProductSupplier[]
  brand             Brand?            @relation(fields: [brandId], references: [id])
  Cart              Cart[]            @ignore

  @@map("product")
}

model Sku {
  id        String  @id @default(uuid())
  width     String
  length    String
  height    String
  weight    String
  costPrice Float   @map("cost_price")
  price     Float
  quantity  Int     @default(0)
  upc       String?
  ean       String?
  isActive  Boolean @default(true) @map("is_active")

  documents String[] @default([])

  productId String  @map("product_id")
  colorId   String? @map("color_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  product    Product     @relation(fields: [productId], references: [id])
  color      Color?      @relation(fields: [colorId], references: [id])
  orderItens OrderItem[] @ignore

  @@map("sku")
}

enum STOCK_TYPE {
  INCOME
  OUTCOME
}

model Color {
  id      String @id @default(uuid())
  name    String
  hex     String
  storeId String @map("store_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  store Store @relation(fields: [storeId], references: [id])
  skus  Sku[]

  @@map("color")
}

model Rating {
  id          String @id @default(uuid())
  name        String
  description String
  stars       Int
  productId   String @map("product_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  product Product @relation(fields: [productId], references: [id])

  @@map("rating")
}

model ProductCategory {
  id         String @id @default(uuid())
  categoryId String @map("category_id")
  productId  String @map("product_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  category Category @relation(fields: [categoryId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@map("product_category")
}

model Category {
  id      String @id @default(uuid())
  name    String
  storeId String @map("store_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  productCategories ProductCategory[]
  store             Store             @relation(fields: [storeId], references: [id])

  @@map("category")
}

model Footer {
  id   String  @id @default(uuid())
  name String
  href String?

  pageId   String  @map("page_id")
  parentId String? @map("parent_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  parent   Footer?  @relation("ChildrenFooter", fields: [parentId], references: [id])
  children Footer[] @relation("ChildrenFooter")
  page     Page     @relation(fields: [pageId], references: [id])

  @@map("footer")
}

model ProductSupplier {
  // TODO: Nﾃグ FEITO

  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id])
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  productId  String   @map("product_id")
  supplierId String   @map("supplier_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@map("product_supplier")
}

model Supplier {
  // TODO: Nﾃグ FEITO

  id        String    @id @default(uuid())
  name      String
  phone     String?
  email     String
  cnpj      String
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  productSupplies ProductSupplier[]

  @@map("supplier")
}

model Cart {
  // TODO: Nﾃグ FEITO

  id        String @id @default(uuid())
  productId String @map("product_id")
  userId    String @map("user_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("cart")
  @@ignore
}

model Order {
  // TODO: Nﾃグ FEITO

  id String @id @default(uuid())

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  payment      Payment?      @ignore
  orderCoupons OrderCoupon[]
  orderItens   OrderItem[]   @ignore

  @@map("order")
}

model Coupon {
  id               String    @id @default(uuid())
  name             String
  description      String?
  code             String
  discount         Int
  maxUsages        Int       @map("max_usages")
  totalUsages      Int       @default(0) @map("total_usages")
  maxUsagesPerUser Int       @default(1) @map("max_usages_per_user")
  isActive         Boolean   @map("is_active")
  storeId          String    @map("store_id")
  fromAt           DateTime? @map("from_at") @db.Timestamp
  toAt             DateTime? @map("to_at") @db.Timestamp

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  store        Store         @relation(fields: [storeId], references: [id])
  orderCoupons OrderCoupon[]

  @@map("coupon")
}

model OrderItem {
  // TODO: Nﾃグ FEITO

  id      String @id @default(uuid())
  orderId String @map("order_id")
  skuId   String @map("sku_id")

  quantity Int
  price    Float
  total    Float
  tax      Float

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  order Order @relation(fields: [orderId], references: [id])
  sku   Sku   @relation(fields: [skuId], references: [id])

  @@map("order_item")
  @@ignore
}

model OrderCoupon {
  // TODO: Nﾃグ FEITO

  id        String    @id @default(uuid())
  couponId  String    @map("coupon_id")
  orderId   String    @map("order_id")
  discout   Float
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  coupon Coupon @relation(fields: [couponId], references: [id])
  order  Order  @relation(fields: [orderId], references: [id])

  @@map("order_coupon")
}

model Payment {
  // TODO: Nﾃグ FEITO

  id        String @id @default(uuid())
  orderId   String @unique @map("order_id")
  firstName String @map("first_name")
  lastName  String @map("last_name")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  order Order @relation(fields: [orderId], references: [id])
  pix   Pix?

  @@map("payment")
  @@ignore
}

model Pix {
  // TODO: Nﾃグ FEITO

  id             String   @id @default(uuid())
  code           String
  image          String
  expirationDate DateTime @map("expiration_date") @db.Timestamp
  paymentId      String   @unique @map("payment_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  payment Payment @relation(fields: [paymentId], references: [id])

  @@map("pix")
  @@ignore
}

model Country {
  id                 String  @id @default(uuid())
  name               String
  iso3               String  @map("iso_3")
  iso2               String  @map("iso_2")
  intermediaryRegion String? @map("intermediary_region")
  subRegion          String? @map("sub_region")
  continent          String?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  states State[]

  @@map("country")
}

model State {
  id        String    @id @default(uuid())
  name      String
  code3     String?   @map("code_3")
  ibgeId    String?   @map("ibge_id")
  region    String
  countryId String    @map("country_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  country Country @relation(fields: [countryId], references: [id])
  cities  City[]

  @@map("state")
}

model City {
  id      String  @id @default(uuid())
  name    String
  ibgeId  String? @map("ibge_id")
  stateId String  @map("state_id")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  state State @relation(fields: [stateId], references: [id])

  @@map("city")
}
